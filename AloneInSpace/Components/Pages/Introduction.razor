@page "/introduction"

<div @ref="focusDiv" tabindex="0" @onkeydown="HandleKeyPress" class="centered-text">
    @if(!string.IsNullOrEmpty(currentText))
    {
        <TypingEffect Text="@currentText" Delay="70" />
        <br />
    }
    <p>Press space to continue.</p>
</div>

@code {
    private List<string> texts = new List<string>
    {
        "We all launched together, each to our own destination.",
        "The others are out there somewhere, working on their tasks.",
        "I wonder if they’re feeling as alone as I am right now.",
        "*Your planet lies just below. It’s barren, uncharted, but it holds the key to understanding this part of the galaxy.*",
        "Alright, I’m almost there. Better grab the tools before I head down."
    };
    private int currentIndex = 0;
    private string currentText;

    private ElementReference focusDiv;

    [Inject] IJSRuntime JS { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentText = texts[currentIndex];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await focusDiv.FocusAsync();
            await JS.InvokeVoidAsync("focusOnElementOnBodyClick", focusDiv);
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if(e.Key == " ")
        {
            ShowNextText();
        }
    }

    private void ShowNextText()
    {
        currentIndex++;

        if(currentIndex < texts.Count)
        {
            currentText = texts[currentIndex];
            StateHasChanged();
        }
        else
        {
            Navigation.NavigateTo("/bedroom");
        }
    }
}
